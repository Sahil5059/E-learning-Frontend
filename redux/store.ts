
'use client';
import { configureStore } from "@reduxjs/toolkit";
import { apiSlice } from "./features/api/apiSlice";
import authSlice from "./features/auth/authSlice";
//exporting
export const store = configureStore({
    reducer: {
        [apiSlice.reducerPath] : apiSlice.reducer,
        auth: authSlice,
    },
    devTools: false, //if set as "true", then users will be able to go to our website and use redux-devtools for our redux-state and we don't want that
    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware)
});
//now, we need to connect this "redux" with our front-end. So, create a file named "Provider.tsx" in the "app" folder.
//OVER: 19("m": ../app/Provider.tsx


const initializeApp = async() => {
    await store.dispatch(apiSlice.endpoints.refreshToken.initiate({}, {forceRefetch: true}));
    await store.dispatch(apiSlice.endpoints.loadUser.initiate({}, {forceRefetch: true})); //always load user only after you have refreshed token or else you might face problems
    setInterval(async() => {
        await store.dispatch(apiSlice.endpoints.refreshToken.initiate({}, {forceRefetch: true}));
    }, 180000);
}
initializeApp();
//watch- 2:27:23 to 2:27:40 and 2:29:30 to 2:29:55
//OVER: 34("m": ../redux/app/components/Header.tsx
