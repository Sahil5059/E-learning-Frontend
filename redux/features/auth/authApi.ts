
//first, watch- 1:52:40 to 2:02:05
import { apiSlice } from "../api/apiSlice";
import { userLoggedIn, userLoggedOut, userRegistration } from "./authSlice";
//defining interfaces
type RegistrationResponse = {
    message: string;
    activationToken: string;
}
type RegistrationData = {};
//setting up user-registration
export const authApi = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        //handling user-registration
        register: builder.mutation<RegistrationResponse,RegistrationData>({
            query: (data) => ({
                url: "registration",
                method: "POST",
                body: data,
                credentials: "include" as const,
            }),
            //sending response to api
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    dispatch(userRegistration({token: result.data.activationToken,}));    
                } catch (error:any) {
                    console.log(error);
                }
            }
        }),
        //handling user-activation
        activation: builder.mutation({
            query: ({activation_token,activation_code}) => ({
                url: "activate-user",
                method: "POST",
                body: {
                    activation_token,
                    activation_code
                },
            }),
        }),


        login: builder.mutation({
            query: ({email,password}) => ({
                url: "login",
                method: "POST",
                body: {
                    email,
                    password
                },
                credentials: "include" as const,
            }),
            //handling response
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    dispatch(userLoggedIn({
                        accessToken: result.data.accessToken,
                        user: result.data.user,
                    }));    
                } catch (error:any) {
                    console.log(error);
                }
            }
            //don't forget to add "useLoginMutation" in the export before procceding to the next step
        }),
        //OVER: 29("../../../app/components/Auth/Login.tsx
        

        socialAuth: builder.mutation({
            query: ({email,name,avatar}) => ({
                url: "social-auth",
                method: "POST",
                body: {
                    email,
                    name,
                    avatar,
                },
                credentials: "include" as const,
            }),
            //handling response
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    dispatch(userLoggedIn({
                        accessToken: result.data.accessToken,
                        user: result.data.user,
                    }));    
                } catch (error:any) {
                    console.log(error);
                }
            }
            //don't forget to add "useSocialAuthMutation" in the export before procceding to the next step
        }),
        //OVER: 45("m": ../../../app/components/Header.tsx


        logOut: builder.query({
            query: () => ({
                url: "logout",
                method: "GET",
                credentials: "include" as const,
            }),
            //handling response
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    console.log(result);
                    dispatch(userLoggedOut());    
                } catch (error:any) {
                    console.log(error);
                }
            }
            //don't forget to add "useLogoutQuery" in the export before procceding to the next step
        }),
        //OVER: 56("m": ../../../app/Profile/profile.tsx

    }),
});
export const {useRegisterMutation,useActivationMutation,useLoginMutation,useSocialAuthMutation,useLogOutQuery} = authApi; //anything other than the first 2 constants is added after the 23rd step
//OVER: 23("m": ../../../app/components/Auth/SignUp.tsx