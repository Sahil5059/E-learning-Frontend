
import {createApi,fetchBaseQuery} from "@reduxjs/toolkit/query/react";
import { userLoggedIn } from "../auth/authSlice"; //imported in the 33rd step
//exporting-data
//now, create a flie named ".env" in the "client" folder, write the following code and then come back: "NEXT_PUBLIC_SERVER_URI = "http://localhost:8000/api/v1/"" (this is basically our server-url)
export const apiSlice = createApi({
    reducerPath: "api",
    baseQuery: fetchBaseQuery({
        baseUrl: process.env.NEXT_PUBLIC_SERVER_URI,
    }),
    endpoints: (builder) => ({

        //for refreshing token
        refreshToken: builder.query({
            query: (data) => ({
                url: "refresh",
                method: "GET",
                credentials: "include" as const,
            }),
        }),
        //for loading user data
        loadUser: builder.query({
            query: (data) => ({
                url:"me",
                method:"GET",
                credentials: "include" as const,
            }),
            //handling response
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    dispatch(userLoggedIn({
                        accessToken: result.data.accessToken,
                        user: result.data.user,
                    }));  
                } catch (error:any) {
                    //console.log(error);
                }
            },
        })
        //don't forget to add "useRefreshTokenQuery" & "useLoadUserQuery" in the export before procceding to the next step
        //now, we will set up code such that the "refresh token" is called on every page load
        //OVER: 33("m": ../store.ts

    }), //we are leaving it empty for now because we don't have any endpoints right now
});
export const {useRefreshTokenQuery,useLoadUserQuery} = apiSlice; //it will be empty i.e. {} in the 18th step and will be filled in later steps
//OVER: 18(../../store.ts