
'use client';
import React, { FC, useEffect, useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from "yup";
import {AiOutlineEye,AiOutlineEyeInvisible,AiFillGithub} from "react-icons/ai";
import {FcGoogle} from "react-icons/fc";
import { styles } from '../../../app/styles/style'; //imported later in this step
import { useLoginMutation } from '../../../redux/features/auth/authApi'; //imported in 30th step
import toast from 'react-hot-toast'; //imported in 32th step


import {signIn} from "next-auth/react";
//OVER: 39 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//defining props
type Props = {
    setRoute:(route:string) => void;
    setOpen:(open:boolean) => void;
}
//creating schema for "yup"
const schema = Yup.object().shape({
    email: Yup.string().email("Invalid email!").required("Please enter your email!"),
    password: Yup.string().required("Please enter your password!").min(6),
});
//creating page
const Login:FC<Props> = ({setRoute,setOpen}) => {
  const [show, setShow] = useState(false); //for showing/hiding password


  const [login,{isSuccess,error}] = useLoginMutation();


  //using "formik" for form-valiation
  const formik = useFormik({
    initialValues: {email:"",password:""},
    validationSchema: schema,
    onSubmit: async({email,password}) => {
        // console.log(email,password)


        //first, comment the above "console.log()" statement and then proceed further
        await login({email,password});


    }
  });


  useEffect(() => {
    if(isSuccess){
        toast.success("Logged in Successfully!");
        location.reload();
        setOpen(false); //this will close the pop-up containing "login and sign-up"
    }
    if(error){
        if("data" in error){
            const errorData = error as any;
            toast.error(errorData.data.message);
        }
    }
    //eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isSuccess,error]);
  //now that we have set up user-login successfully, we will now move towards the coding of "loding user and refreshing token" after user-login
  //OVER: 32("m": ../../../redux/features/api/apiSlice.ts

  const {errors,touched,values,handleChange,handleSubmit} = formik;
  //now, we will be using the same style in a lot of our components, so lets first create that type of style separately. Create a folder named "styles" inside the "app" folder and then create a file named "style.ts" inside the "styles" folder, code in it and then come back here.
  //also, watch- 1:09:55 to 1:10:20
  //disaplaying data to user
  return (
    <div className='w-full'>
        <h1 className={`${styles.title}`}>
            Login with Elearning
        </h1>
        <form onSubmit={handleSubmit}>
            {/* for email */}
            <label className={`${styles.label}`} htmlFor="email">Enter your Email</label>
            <input type="email" name="" value={values.email} onChange={handleChange} id="email" placeholder='loginmail@gmail.com' className={`${errors.email && touched.email && "border-red-500"} ${styles.input}`} />
            {errors.email && touched.email && (<span className="text-red-500 pt-2 block">{errors.email}</span>)}
            {/* for password */}
            <div className='w-full mt-5 relative mb-1'>
                <label className={`${styles.label}`} htmlFor="password">Enter your password</label>
                <input type={!show ? "password" : "text"} name="password" value={values.password} onChange={handleChange} id="password" placeholder="password!@%" className={`${errors.password && touched.password && "border-red-500"} ${styles.input}`} />
                {!show ? (<AiOutlineEyeInvisible className="absolute bottom-3 right-2 z-1 cursor-pointer" size={20} onClick={() => setShow(true)}/>) : (<AiOutlineEye className="absolute bottom-3 right-2 z-1 cursor-pointer" size={20} onClick={() => setShow(false)}/>)}
            </div>
            {errors.password && touched.password && (<span className="text-red-500 pt-2 block">{errors.password}</span>)}
            {/* for submit-button */}
            <div className="w-full mt-5">
                <input type="submit" value="Login" className={`${styles.button}`} />
            </div>
            {/* for social-auth */}
            <br />
            <h5 className="text-center pt-4 font-Poppins text-[14px] text-black dark:text-white">Or join with</h5>
            <div className='flex items-center justify-center my-3'>
                {/* <FcGoogle size={30} className='cursor-pointer mr-2'/> */}

                {}
                {/* first, comment the the above line before proceeding further */}
                <FcGoogle size={30} className="cursor-pointer mr-2" onClick={() => signIn("google")}/>
                {}

                {/* <AiFillGithub size={30} className='cursor-pointer ml-2 dark:text-white text-black'/> */}

                {}
                {/* first, comment the the above line before proceeding further */}
                <AiFillGithub size={30} className="cursor-pointer ml-2 dark:text-white text-black" onClick={() => signIn("github")}/>
                {/* OVER: 41("m": ../../layout.tsx}
            
            </div>
            {/* for sign-up */}
            <h5 className='text-center pt-4 font-Poppins text-[14px] dark:text-white text-black'>Not have any account?{" "}<span className='text-[#2190ff] pl-1 cursor-pointer' onClick={() => setRoute("Sign-Up")}>Sign up</span></h5>
            <br />
        </form>
    </div>
  )
}
export default Login;
//OVER: 14("c": ./SignUp.tsx and "m": ./SignUp.tsx