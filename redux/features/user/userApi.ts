
import { apiSlice } from "../api/apiSlice";
//creating-data and exporting it
export const userApi = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        updateAvatar: builder.mutation({
            query: (avatar) => ({
                url: "update-user-avatar",
                method: "PUT",
                body: {avatar},
                credentials: "include" as const,
            }),
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    if(result.data.success === true){
                        console.log("Profile successfully updated");
                    }    
                } catch (error:any) {
                    console.log(error);
                }
            }
        }),


        editProfile: builder.mutation({
            query: ({name}) => ({
                url: "update-user-info",
                method: "PUT",
                body: {name},
                credentials: "include" as const,
            }),
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    if(result.data.success === true){
                        console.log("Profile successfully updated");
                    }    
                } catch (error:any) {
                    console.log(error);
                }
            }
        }),
        //don't forget to add "useEditProfileMutation" in the export before procceding to the next step
        //OVER: 65("m": ../../../app/Profile/ProfileInfo.tsx
        

        updatePassword: builder.mutation({
            query: ({oldPassword,newPassword}) => ({
                url: "update-user-password",
                method: "PUT",
                body: {
                    oldPassword,
                    newPassword,
                },
                credentials: "include" as const,
            }),
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    if(result.data.success === true){
                        console.log("Password successfully changed");
                    }    
                } catch (error:any) {
                    console.log(error);
                }
            }
        }),
        //don't forget to add "useUpdatePasswordMutation" in the export before procceding to the next step
        //OVER: 71("m": ../../../app/Profile/ProfileInfo.tsx


        getAllUsers: builder.query({
            query: () => ({
                url: "get-users",
                method: "GET",
                credentials: "include" as const,
            }),
        }),
        //also, adding code for updating user-role
        updateUserRole: builder.mutation({
            query: ({id,role}) => ({
                url: "update-user",
                method: "PUT",
                body: {
                    id,
                    role,
                },
                credentials: "include" as const,
            }),
            async onQueryStarted(arg,{queryFulfilled,dispatch}){
                try {
                    const result = await queryFulfilled;
                    if(result.data.success === true){
                        console.log("User-role updated successfully");
                    }    
                } catch (error:any) {
                    console.log(error);
                }
            }
        }),
        //also, adding code for deleting user
        deleteUser: builder.mutation({
            query: (id) => ({
                url: `delete-user/${id}`,
                method: "DELETE",
                credentials: "include" as const,
            }),
        }),
        //don't forget to add "useGetAllUsersQuery", "useUpdateUserRoleMutation" & "useDeleteCourseMutation" in the export before procceding to the next step
        //OVER: 108("m": ../../../app/components/Admin/Users/AllUsers.tsx) ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    })
});
export const {useUpdateAvatarMutation,useEditProfileMutation,useUpdatePasswordMutation,useGetAllUsersQuery,useUpdateUserRoleMutation,useDeleteUserMutation} = userApi;
//OVER: 61("m": ../../../app/Profile/ChangePassword.tsx
